{"version":3,"sources":["../src/index.js"],"names":["dotenv","config","app","PORT","process","env","mongoose","connect","MONGO","useNewUrlParser","useFindAndModify","useUnifiedTopology","db","connection","handleOpen","console","log","handleError","error","once","on","handleListening","listen","get","req","res","send","status","json","date","query","length","Cap","find","aa","b","filter","a","getDate","JSON","stringify","createdAt","split","substring","join","password","err"],"mappings":"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","sourcesContent":["import \"@babel/polyfill\";\nimport express from \"express\";\nimport mongoose from \"mongoose\";\nimport dotenv from \"dotenv\";\ndotenv.config();\nimport Cap from \"./cap\";\n\nconst app = express();\n\nconst PORT = process.env.PORT || 4000;\n\nmongoose.connect(process.env.MONGO, {\n  useNewUrlParser: true,\n  useFindAndModify: false,\n  useUnifiedTopology: true,\n});\n\nconst db = mongoose.connection;\n\nconst handleOpen = () => console.log(\"✅  Connected to DB\");\nconst handleError = (error) =>\n  console.log(`❌ Error on DB Connection:${error}`);\n\ndb.once(\"open\", handleOpen);\ndb.on(\"error\", handleError);\n\nconst handleListening = () => console.log(`✅ Hi`);\n\napp.listen(PORT, handleListening);\n\napp.get(\"/\", (req, res) => res.send(\"hi\"));\napp.get(\"/fromRaspberry\", (req, res) => {\n  res.status(200).json(\"Raspberry success\");\n});\napp.get(\"/fromApp\", (req, res) => {\n  res.status(200).json(\"fromApp success\");\n});\napp.get(\"/test\", async (req, res) => {\n  const {\n    query: { date },\n  } = req;\n  // await Cap.findOne({\n  //   createdAt:\n  // })\n  if (date) {\n    if (date.length === 8) {\n      const aa = await Cap.find({});\n      const b = aa.filter((a) => {\n        const getDate = JSON.stringify(a.createdAt)\n          .split(\"T\")[0]\n          .substring(1)\n          .split(\"-\")\n          .join(\"\");\n        if (getDate === date) {\n          return getDate;\n        } else {\n          return null;\n        }\n      });\n      res.status(200).json(b);\n    } else {\n      res.status(400).send(\"worng date input\");\n    }\n  } else {\n    res.status(400).send(\"give me date\");\n  }\n});\napp.get(\"/seeAllData\", async (req, res) => {\n  const a = await Cap.find({});\n\n  res.status(200).json(a);\n});\napp.get(\"/helmetTrue\", async (req, res) => {\n  try {\n    const {\n      query: { password },\n    } = req;\n    if (password === \"capston\") {\n      // await Cap.create({\n      //   isHelmet: true,\n      // });\n      res.status(200).send(\"data created\");\n    } else {\n      res.status(400).send(\"wrong password\");\n    }\n  } catch (err) {\n    console.log(err);\n    res.status(400).send(err);\n  }\n});\napp.get(\"/helmetFalse\", async (req, res) => {\n  try {\n    const {\n      query: { password },\n    } = req;\n    if (password === \"capston\") {\n      // await Cap.create({\n      //   isHelmet: false,\n      // });\n      res.status(200).send(\"data created\");\n    } else {\n      res.status(400).send(\"wrong password\");\n    }\n  } catch (err) {\n    console.log(err);\n    res.status(400).send(err);\n  }\n});\n"],"file":"index.js"}