{"version":3,"sources":["../src/index.js"],"names":["dotenv","config","app","PORT","process","env","mongoose","connect","MONGO","useNewUrlParser","useFindAndModify","useUnifiedTopology","db","connection","handleOpen","console","log","handleError","error","once","on","handleListening","listen","get","req","res","send","status","json","Cap","create","isHelmet","True","a"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;AADAA,mBAAOC,MAAP;;AAGA,IAAMC,GAAG,GAAG,0BAAZ;AAEA,IAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;;AAEAG,qBAASC,OAAT,CAAiBH,OAAO,CAACC,GAAR,CAAYG,KAA7B,EAAoC;AAClCC,EAAAA,eAAe,EAAE,IADiB;AAElCC,EAAAA,gBAAgB,EAAE,KAFgB;AAGlCC,EAAAA,kBAAkB,EAAE;AAHc,CAApC;;AAMA,IAAMC,EAAE,GAAGN,qBAASO,UAApB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAMC,OAAO,CAACC,GAAR,CAAY,oBAAZ,CAAN;AAAA,CAAnB;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD;AAAA,SAClBH,OAAO,CAACC,GAAR,yCAAwCE,KAAxC,EADkB;AAAA,CAApB;;AAGAN,EAAE,CAACO,IAAH,CAAQ,MAAR,EAAgBL,UAAhB;AACAF,EAAE,CAACQ,EAAH,CAAM,OAAN,EAAeH,WAAf;;AAEA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB;AAAA,SAAMN,OAAO,CAACC,GAAR,aAAN;AAAA,CAAxB;;AAEAd,GAAG,CAACoB,MAAJ,CAAWnB,IAAX,EAAiBkB,eAAjB;AAEAnB,GAAG,CAACqB,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN;AAAA,SAAcA,GAAG,CAACC,IAAJ,CAAS,IAAT,CAAd;AAAA,CAAb;AACAxB,GAAG,CAACqB,GAAJ,CAAQ,gBAAR,EAA0B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACtCA,EAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,mBAArB;AACD,CAFD;AAGA1B,GAAG,CAACqB,GAAJ,CAAQ,UAAR,EAAoB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAChCA,EAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iBAArB;AACD,CAFD;AAGA1B,GAAG,CAACqB,GAAJ,CAAQ,OAAR,EAAgB,UAACC,GAAD,EAAKC,GAAL,EAAY;AAC1BA,EAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,MAArB;AACD,CAFD;AAGA1B,GAAG,CAACqB,GAAJ,CAAQ,WAAR;AAAA,qEAAqB,iBAAMC,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEDI,gBAAIC,MAAJ,CAAW;AACzBC,cAAAA,QAAQ,EAACC;AADgB,aAAX,CAFC;;AAAA;AAEXC,YAAAA,CAFW;AAKjBR,YAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBK,CAArB;AALiB;AAAA;;AAAA;AAAA;AAAA;AAOjBR,YAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX;;AAPiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import '@babel/polyfill';\nimport express from \"express\";\nimport mongoose from \"mongoose\";\nimport dotenv from \"dotenv\";\ndotenv.config()\nimport Cap from \"./cap\"\n\nconst app = express();\n\nconst PORT = process.env.PORT || 4000;\n\nmongoose.connect(process.env.MONGO, {\n  useNewUrlParser: true,\n  useFindAndModify: false,\n  useUnifiedTopology: true\n});\n\nconst db = mongoose.connection;\n\nconst handleOpen = () => console.log(\"✅  Connected to DB\");\nconst handleError = (error) =>\n  console.log(`❌ Error on DB Connection:${error}`);\n\ndb.once(\"open\", handleOpen);\ndb.on(\"error\", handleError);\n\nconst handleListening = () => console.log(`✅ Hi`);\n\napp.listen(PORT, handleListening);\n\napp.get(\"/\", (req, res) => res.send(\"hi\"));\napp.get(\"/fromRaspberry\", (req, res) => {\n  res.status(200).json(\"Raspberry success\");\n});\napp.get(\"/fromApp\", (req, res) => {\n  res.status(200).json(\"fromApp success\");\n});\napp.get(\"/test\",(req,res)=> {\n  res.status(200).json('test')\n})\napp.get(\"/makeData\", async(req, res) => {\n  try{\n    const a = await Cap.create({\n      isHelmet:True,\n    })\n    res.status(200).json(a)\n  }catch{\n    res.status(400)\n  }\n})"],"file":"index.js"}